// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId  Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  posts   Post[]   @relation("UserPosts")
  Profile Profile?
  Like    Like[]
}

model Post {
  postId    Int       @id @default(autoincrement())
  title     String
  content   String?
  published Boolean   @default(false)
  authorId  Int
  author    User      @relation("UserPosts", fields: [authorId], references: [userId])
  comments  Comment[]
  Like      Like[]
}

model Comment {
  commentId Int    @id @default(autoincrement())
  content   String
  postId    Int
  post      Post   @relation(fields: [postId], references: [postId])
}

model Profile {
  profileId Int      @id @default(autoincrement())
  bio       String?
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [userId])

  @@index([userId], name: "idx_profile_userId")
}

model Like {
  likeId    Int      @id @default(autoincrement())
  postId    Int
  post      Post     @relation(fields: [postId], references: [postId])
  userId    Int
  user      User     @relation(fields: [userId], references: [userId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([postId, userId], name: "unique_like_post_user")
  @@index([postId], name: "idx_like_postId")
  @@index([userId], name: "idx_like_userId")
  @@map("likes")
}
